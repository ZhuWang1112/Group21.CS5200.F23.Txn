"0","# Call the stored procedure"
"0","#dbExecute(mydb, ""CALL AddBirdStrike('2023-10-21', 'SFO', 'San Francisco International Airport', "
"0","#          'California', 'Delta', 'Boeing 777', 10000, TRUE, 3, 'Engine Shut Down', TRUE, "
"0","#          'Some Cloud', 'It was a cloudy day.')"")"
"0",""
"0","new_data <- read.csv(""strikes_Zhu Wang.csv"", header = TRUE, stringsAsFactors = FALSE)"
"0",""
"0","dbExecute(mydb, ""START TRANSACTION"")"
"1","[1]"
"1"," 0"
"1","
"
"0","txnFailed <- FALSE"
"0",""
"0","for (i in 1:nrow(new_data)) {"
"0","  row <- new_data[i, ]"
"0",""
"0","  ##### airports table"
"0","  aid <- NA"
"0","  # Check if the airport already exists"
"0","  check_airport_sql <- sprintf(""SELECT aid FROM airports WHERE airportName = '%s'"", row$airport)"
"0","  ps <- dbSendQuery(mydb, check_airport_sql)"
"0","  existing_airport <- dbFetch(ps, n = 1)"
"0","  dbClearResult(ps)"
"0","  if (nrow(existing_airport) > 0) {"
"0","    # If the airport already exists"
"0","    aid <- existing_airport$aid"
"0","  } else {"
"0","    # Otherwise, insert the new airport record"
"0","    insert_airport_sql <- sprintf(""INSERT INTO airports (airportName, airportState) VALUES ('%s', '%s')"", row$airport, row$origin)"
"0","    ps <- dbSendStatement(mydb, insert_airport_sql)"
"0","    if (dbGetRowsAffected(ps) < 1) { "
"0","      txnFailed <- TRUE; "
"0","      dbClearResult(ps); "
"0","      break }"
"0","    dbClearResult(ps)"
"0",""
"0","    # Get the aid for the latest inserted airport row"
"0","    aid <- dbGetQuery(mydb, ""SELECT LAST_INSERT_ID() as aid"")$aid"
"0","  }"
"0","  "
"0","  ##### flights table"
"0","  new.date <- NA"
"0","  old.date <- row$flight_date"
"0","  if (!is.na(old.date) && old.date != '') {"
"0","    temp.date <- as.Date(old.date, format = ""%m/%d/%y"")"
"0","    new.date = as.character(temp.date)"
"0","  }"
"0","  formatted_date <- as.Date(new.date)"
"0","  "
"0","  # Formatting heavy"
"0","  formatted_heavy <- as.integer(ifelse(row$heavy_flag == ""Yes"", 1, 0))  # 转换为 1 或 0"
"0",""
"0","  # Formatting altitude"
"0","  formatted_altitude <- as.integer(gsub("","", """", row$altitude_ft))  # 移除逗号并转换为整数"
"0",""
"0","  # insert flights table"
"0","  flight_insert_sql <- sprintf(""INSERT INTO flights (date, origin, airline, aircraft, altitude, heavy) VALUES ('%s', %d, '%s', '%s', %d, %d)"",as.character(formatted_date), aid, row$airline, row$aircraft, formatted_altitude, formatted_heavy)"
"0","  ps <- dbSendStatement(mydb, flight_insert_sql)"
"0","  if (dbGetRowsAffected(ps) < 1) {"
"0","    txnFailed <- TRUE"
"0","    dbClearResult(ps)"
"0","    break"
"0","  }"
"0","  dbClearResult(ps)"
"0","  fid <- dbGetQuery(mydb, ""SELECT LAST_INSERT_ID() as fid"")$fid"
"0",""
"0","  # conditions table"
"0","  cid <- NA"
"0","  check_condition_sql <- sprintf(""SELECT cid FROM conditions WHERE sky_condition = '%s'"", row$sky_conditions)"
"0","  ps <- dbSendQuery(mydb, check_condition_sql)"
"0","    existing_condition <- dbFetch(ps, n = 1)"
"0","    dbClearResult(ps)"
"0","    if (nrow(existing_condition) > 0) {"
"0","      # If it exists, use the existing cid"
"0","      cid <- existing_condition$cid"
"0","    } else {"
"0","      # If it doesn't exist, insert a new row"
"0","      insert_condition_sql <- sprintf(""INSERT INTO conditions (sky_condition) VALUES ('%s')"", row$sky_conditions)"
"0","      ps <- dbSendStatement(mydb, insert_condition_sql)"
"0","      if (dbGetRowsAffected(ps) < 1) { txnFailed <- TRUE; dbClearResult(ps); break }"
"0","      dbClearResult(ps)"
"0",""
"0","      # Gets the cid of the latest inserted row"
"0","      cid <- dbGetQuery(mydb, ""SELECT LAST_INSERT_ID() as cid"")$cid"
"0","    }"
"0","  if (txnFailed) { "
"0","    break "
"0","    }"
"0",""
"0","  ##### strikes table"
"0","    "
"0","  # Formatting damage"
"0","  formatted_damage <- ifelse(row$damage == ""Caused damage"", 1, 0)"
"0","  "
"0","  # insert strikes table"
"0","  strike_insert_sql <- sprintf(""INSERT INTO strikes (fid, numbirds, impact, damage, altitude, conditions) VALUES (%d, %d, '%s', %d, %d, %d)"",fid, row$wildlife_struck, row$impact, formatted_damage, formatted_altitude, cid)"
"0","  ps <- dbSendStatement(mydb, strike_insert_sql)"
"0",""
"0","  if (dbGetRowsAffected(ps) < 1) {"
"0","    txnFailed <- TRUE"
"0","    dbClearResult(ps)"
"0","    break"
"0","  }"
"0","  dbClearResult(ps)"
"0","  "
"0","}"
"0",""
"0","if (txnFailed) {"
"0","  dbExecute(mydb, ""ROLLBACK"")"
"0","} else {"
"0","  dbExecute(mydb, ""COMMIT"")"
"0","}"
"1","[1]"
"1"," 0"
"1","
"
"0","if (!txnFailed) {"
"0","  cat('Transfer successful')"
"0","} else {"
"0","  cat('Transfer failed')"
"0","}"
"1","Transfer successful"
